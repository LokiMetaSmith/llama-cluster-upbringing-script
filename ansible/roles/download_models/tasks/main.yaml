---
# tasks file for download_models

# --- 1. Query Consul and Set Facts ---
- name: Query Consul for all model configurations
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/kv/config/models/{{ item }}?raw=true"
    return_content: yes
  loop:
    - main
    - coding
    - math
    - extract
    - piper_voice_files
    - embedding_models
    - stt_models
    - vision_models
  register: model_config_results
  ignore_errors: true

- name: Set model facts from Consul KV
  ansible.builtin.set_fact:
    loop: "{{ (llm_models_to_download.values() | safe_flatten | unique(attribute='filename')) | list }}"
    piper_voice_files: "{{ (model_config_results.results[4].content | from_json) if model_config_results.results[4].status == 200 and model_config_results.results[4].content else [] }}"
    embedding_models: "{{ (model_config_results.results[5].content | from_json) if model_config_results.results[5].status == 200 and model_config_results.results[5].content else [] }}"
    stt_models: "{{ (model_config_results.results[6].content | from_json) if model_config_results.results[6].status == 200 and model_config_results.results[6].content else {} }}"
    vision_models: "{{ (model_config_results.results[7].content | from_json) if model_config_results.results[7].status == 200 and model_config_results.results[7].content else [] }}"

# --- 2. LLM Models ---
- name: "Ensure LLM model directory exists"
  ansible.builtin.file:
    path: "/opt/nomad/models/llm"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing LLM models
  ansible.builtin.stat:
    path: "/opt/nomad/models/llm/{{ item.filename }}"
  loop: "{{ llm_models_to_download.values() | select('list') | sum(start=[]) | unique(attribute='filename') }}"
  register: llm_model_files
  become: yes

- name: Download all LLM models if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "/opt/nomad/models/llm/{{ item.item.filename }}"
    mode: '0644'
  loop: "{{ llm_model_files.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# --- 3. STT Models (Provider-based directory structure with existence checks) ---
- name: Create provider-specific STT model directories
  ansible.builtin.file:
    path: "/opt/nomad/models/stt/{{ item.key }}"
    state: directory
    mode: '0755'
  loop: "{{ stt_models | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: yes

- name: Check for existing STT models (URL-based)
  ansible.builtin.stat:
    path: "/opt/nomad/models/stt/{{ item.0.key }}/{{ item.1.filename }}"
  loop: "{{ stt_models | dict2items | subelements('value') | selectattr('1.url', 'defined') | list }}"
  register: stt_model_files_url
  become: yes
  loop_control:
    label: "{{ item.1.name }}"

- name: Check for existing STT models (Hub-based)
  ansible.builtin.stat:
    path: "/opt/nomad/models/stt/{{ item.0.key }}/{{ item.1.name }}"
  loop: "{{ stt_models | dict2items | subelements('value') | selectattr('1.repo_id', 'defined') | list }}"
  register: stt_model_files_hub
  become: yes
  loop_control:
    label: "{{ item.1.name }}"

- name: Download all STT models (URL-based) if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.1.url }}"
    dest: "/opt/nomad/models/stt/{{ item.item.0.key }}/{{ item.item.1.filename }}"
    mode: '0644'
  loop: "{{ stt_model_files_url.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    label: "{{ item.item.1.name }}"
    loop_var: item

- name: Download all STT models (Hub-based) if they do not exist
  ansible.builtin.script: "download_hf_repo.py {{ item.item.1.repo_id }} /opt/nomad/models/stt/{{ item.item.0.key }}/{{ item.item.1.name }}"
  args:
    executable: "/opt/pipecatapp/venv/bin/python"
    creates: "/opt/nomad/models/stt/{{ item.0.key }}/{{ item.1.name }}"
  loop: "{{ stt_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    label: "{{ item.item.1.name }}"
    loop_var: item

# --- 4. TTS (Piper) Voice Files ---
- name: "Ensure TTS model directory exists"
  ansible.builtin.file:
    path: "/opt/nomad/models/tts"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing TTS model files
  ansible.builtin.stat:
    path: "/opt/nomad/models/tts/{{ item.filename }}"
  loop: "{{ piper_voice_files }}"
  register: tts_model_files
  become: yes

- name: Download all Text-to-Speech model files if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "/opt/nomad/models/tts/{{ item.item.filename }}"
    mode: '0644'
  loop: "{{ tts_model_files.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# --- 5. Vision Models ---
- name: "Ensure Vision model directory exists"
  ansible.builtin.file:
    path: "/opt/nomad/models/vision"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing Vision models (URL-based)
  ansible.builtin.stat:
    path: "/opt/nomad/models/vision/{{ item.filename }}"
  loop: "{{ vision_models | selectattr('url', 'defined') | list }}"
  register: vision_model_files_url
  become: yes

- name: Check for existing Vision models (Hub-based)
  ansible.builtin.stat:
    path: "/opt/nomad/models/vision/{{ item.name }}"
  loop: "{{ vision_models | selectattr('repo_id', 'defined') | list }}"
  register: vision_model_files_hub
  become: yes

- name: Download all Vision models (URL-based) if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "/opt/nomad/models/vision/{{ item.item.filename }}"
    mode: '0644'
  loop: "{{ vision_model_files_url.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

- name: Download all Vision models (Hub-based) if they do not exist
  ansible.builtin.script: "download_hf_repo.py {{ item.item.repo_id }} /opt/nomad/models/vision/{{ item.item.name }}"
  args:
    executable: "/opt/pipecatapp/venv/bin/python"
  loop: "{{ vision_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# --- 6. Embedding Models ---
- name: "Ensure Embedding model directory exists"
  ansible.builtin.file:
    path: "/opt/nomad/models/embedding"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing Embedding models (Hub-based)
  ansible.builtin.stat:
    path: "/opt/nomad/models/embedding/{{ item.name }}"
  loop: "{{ embedding_models | selectattr('repo_id', 'defined') | list }}"
  register: embedding_model_files_hub
  become: yes

- name: Download all Embedding models (Hub-based) if they do not exist
  ansible.builtin.script: "download_hf_repo.py {{ item.item.repo_id }} /opt/nomad/models/embedding/{{ item.item.name }}"
  args:
    executable: "/opt/pipecatapp/venv/bin/python"
  loop: "{{ embedding_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item
