---
# tasks file for download_models

- name: Query Consul for all model configurations
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/kv/config/models/{{ item }}?raw=true"
    method: GET
    status_code: [200, 404]
    return_content: true
  loop:
    - main
    - coding
    - math
    - extract
    - router
    - piper_voice_files
    - embedding_models
    - stt_models
    - vision_models
  register: consul_models
  until: consul_models.status in [200, 404]
  retries: 5
  delay: 2
  failed_when: false

- name: Set model facts from Consul KV
  ansible.builtin.set_fact:
    llm_models_to_download: "{{ consul_models.results | selectattr('status', 'equalto', 200) | selectattr('item', 'in', ['main', 'coding', 'math', 'extract', 'router']) | map(attribute='content') | map('from_json') | sum(start=[]) }}"
    piper_voice_files: "{{ consul_models.results | selectattr('status', 'equalto', 200) | selectattr('item', 'equalto', 'piper_voice_files') | map(attribute='content') | map('from_json') | first | default([]) }}"
    embedding_models: "{{ consul_models.results | selectattr('status', 'equalto', 200) | selectattr('item', 'equalto', 'embedding_models') | map(attribute='content') | map('from_json') | first | default([]) }}"
    stt_models: "{{ ((consul_models.results | selectattr('status', 'equalto', 200) | selectattr('item', 'equalto', 'stt_models') | first).content | default('{}')) | from_json }}"
    vision_models: "{{ consul_models.results | selectattr('status', 'equalto', 200) | selectattr('item', 'equalto', 'vision_models') | map(attribute='content') | map('from_json') | first | default([]) }}"

         
# ---------------------------------------------------------------------------- #
#                                  LLM Models                                  #
# ---------------------------------------------------------------------------- #
- name: Ensure LLM model directory exists
  ansible.builtin.file:
    path: "{{ nomad_models_dir }}/llm"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing LLM models
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/llm/{{ item.filename }}"
  loop: "{{ llm_models_to_download | selectattr('filename', 'defined') | list | unique(attribute='filename') }}"
  register: llm_model_files
  become: yes

- name: Download all LLM models if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "{{ nomad_models_dir }}/llm/{{ item.item.filename }}"
    mode: '0644'
    timeout: 3600
  loop: "{{ llm_model_files.results }}"
  when: not (item.stat.exists | default(false))
  become: yes
  loop_control:
    loop_var: item

# ---------------------------------------------------------------------------- #
#                                  STT Models                                  #
# ---------------------------------------------------------------------------- #
- name: Create provider-specific STT model directories
  ansible.builtin.file:
    path: "{{ nomad_models_dir }}/stt/{{ item.key }}"
    state: directory
    mode: '0755'
  loop: "{{ stt_models | dict2items }}"
  become: yes

- name: Check for existing STT models (URL-based)
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/stt/{{ item[0].key }}/{{ item[1].filename }}"
  loop: "{{ stt_models | dict2items | subelements('value') | selectattr(1, 'match', 'url') | list }}"
  register: stt_model_files_url
  become: yes

- name: Check for existing STT models (Hub-based)
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/stt/{{ item[0].key }}/{{ item[1].name }}"
  loop: "{{ stt_models | dict2items | subelements('value') | selectattr(1, 'match', 'repo_id') | list }}"
  register: stt_model_files_hub
  become: yes

- name: Download all STT models (URL-based) if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item[1].url }}"
    dest: "{{ nomad_models_dir }}/stt/{{ item.item[0].key }}/{{ item.item[1].filename }}"
    mode: '0644'
  loop: "{{ stt_model_files_url.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

- name: Download all STT models (Hub-based) if they do not exist
  ansible.builtin.command:
    cmd: >
      /opt/pipecatapp/venv/bin/python3 {{ role_path }}/files/download_hf_repo.py
      --repo-id "{{ item.item[1].repo_id }}"
      --local-dir "{{ nomad_models_dir }}/stt/{{ item.item[0].key }}/{{ item.item[1].name }}"
  loop: "{{ stt_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# ---------------------------------------------------------------------------- #
#                                  TTS Models                                  #
# ---------------------------------------------------------------------------- #
- name: Ensure TTS model directory exists
  ansible.builtin.file:
    path: "{{ nomad_models_dir }}/tts"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing TTS model files
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/tts/{{ item.filename }}"
  loop: "{{ piper_voice_files }}"
  register: tts_model_files
  become: yes

- name: Download all Text-to-Speech model files if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "{{ nomad_models_dir }}/tts/{{ item.item.filename }}"
    mode: '0644'
  loop: "{{ tts_model_files.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# ---------------------------------------------------------------------------- #
#                                 Vision Models                                #
# ---------------------------------------------------------------------------- #
- name: Ensure Vision model directory exists
  ansible.builtin.file:
    path: "{{ nomad_models_dir }}/vision"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing Vision models (URL-based)
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/vision/{{ item.filename }}"
  loop: "{{ vision_models | selectattr('filename', 'defined') | list }}"
  register: vision_model_files_url
  become: yes

- name: Check for existing Vision models (Hub-based)
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/vision/{{ item.name }}"
  loop: "{{ vision_models | selectattr('repo_id', 'defined') | list }}"
  register: vision_model_files_hub
  become: yes

- name: Download all Vision models (URL-based) if they do not exist
  ansible.builtin.get_url:
    url: "{{ item.item.url }}"
    dest: "{{ nomad_models_dir }}/vision/{{ item.item.filename }}"
    mode: '0644'
  loop: "{{ vision_model_files_url.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

- name: Download all Vision models (Hub-based) if they do not exist
  ansible.builtin.command:
    cmd: >
      /opt/pipecatapp/venv/bin/python3 {{ role_path }}/files/download_hf_repo.py
      --repo-id "{{ item.item.repo_id }}"
      --local-dir "{{ nomad_models_dir }}/vision/{{ item.item.name }}"
  loop: "{{ vision_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item

# ---------------------------------------------------------------------------- #
#                               Embedding Models                               #
# ---------------------------------------------------------------------------- #
- name: Ensure Embedding model directory exists
  ansible.builtin.file:
    path: "{{ nomad_models_dir }}/embedding"
    state: directory
    mode: '0755'
  become: yes

- name: Check for existing Embedding models (Hub-based)
  ansible.builtin.stat:
    path: "{{ nomad_models_dir }}/embedding/{{ item.name }}"
  loop: "{{ embedding_models | selectattr('repo_id', 'defined') | list }}"
  register: embedding_model_files_hub
  become: yes

- name: Download all Embedding models (Hub-based) if they do not exist
  ansible.builtin.command:
    cmd: >
      /opt/pipecatapp/venv/bin/python3 {{ role_path }}/files/download_hf_repo.py
      --repo-id "{{ item.item.repo_id }}"
      --local-dir "{{ nomad_models_dir }}/embedding/{{ item.item.name }}"
  loop: "{{ embedding_model_files_hub.results }}"
  when: not item.stat.exists
  become: yes
  loop_control:
    loop_var: item
