---
- name: Aggregate all unique LLM models from different expert lists
  ansible.builtin.set_fact:
    unique_llm_models_yaml: |
      {% set processed_urls = [] %}
      {% set unique_models = [] %}
      {% for model in main_expert_models + coding_expert_models %}
        {% if model.url not in processed_urls %}
          {% set _ = unique_models.append(model) %}
          {% set _ = processed_urls.append(model.url) %}
        {% endif %}
      {% endfor %}
      {{ unique_models | to_nice_yaml }}
  become: yes

- name: Download all unique LLM models
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/opt/nomad/models/llm/{{ item.filename }}"
    mode: '0644'
  loop: "{{ unique_llm_models_yaml | from_yaml }}"
  become: yes
  loop_control:
    loop_var: item

- name: Download all Speech-to-Text models
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/opt/nomad/models/stt/{{ item.filename }}"
    mode: '0644'
  loop: "{{ stt_models }}"
  become: yes
  loop_control:
    loop_var: item

- name: Download all Text-to-Speech models
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/opt/nomad/models/tts/{{ item.filename }}"
    mode: '0644'
  loop: "{{ tts_models }}"
  become: yes
  loop_control:
    loop_var: item

- name: Download all Vision models (URL-based)
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "/opt/nomad/models/vision/{{ item.filename }}"
    mode: '0644'
  loop: "{{ vision_models | selectattr('url', 'defined') | list }}"
  become: yes
  loop_control:
    loop_var: item

- name: Download all Vision models (Hub-based)
  ansible.builtin.script: "download_hf_repo.py {{ item.repo_id }} /opt/nomad/models/vision/{{ item.name }}"
  args:
    executable: "/home/{{ target_user }}/.local/bin/python3"
  loop: "{{ vision_models | selectattr('repo_id', 'defined') | list }}"
  become: yes
  loop_control:
    loop_var: item

- name: Download all Embedding models (Hub-based)
  ansible.builtin.script: "download_hf_repo.py {{ item.repo_id }} /opt/nomad/models/embedding/{{ item.name }}"
  args:
    executable: "/home/{{ target_user }}/.local/bin/python3"
  loop: "{{ embedding_models | selectattr('repo_id', 'defined') | list }}"
  become: yes
  loop_control:
    loop_var: item
