# tasks file for ansible/roles/config_manager/tasks/main.yaml

# --- Check for auth file instead of waiting ---
- name: Check if Home Assistant auth file exists
  ansible.builtin.stat:
    path: /opt/nomad/volumes/ha-config/.storage/auth_provider.homeassistant
  register: hass_auth_file_stat
  become: yes

# --- Make subsequent tasks conditional ---
- name: Read Home Assistant auth file if it exists
  ansible.builtin.slurp:
    src: /opt/nomad/volumes/ha-config/.storage/auth_provider.homeassistant
  register: "hass_auth_file_content"
  become: yes
  when: hass_auth_file_stat.stat.exists # Only run if file exists

- name: Set hass_token fact if file was read
  ansible.builtin.set_fact:
    # Use default filter to handle case where slurp didn't run
    hass_token: >
      {{
        (hass_auth_file_content.content | default('e30K') | b64decode | from_json({}, true)).data.ll_tokens
        | selectattr('type', 'eq', 'long_lived_access')
        | map(attribute='token')
        | first | default(none, true)
      }}
  when: hass_auth_file_stat.stat.exists # Only run if file exists

- name: Populate Consul KV with Model Configurations
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/kv/config/models/{{ item.key }}"
    method: PUT
    body: "{{ item.value | to_json }}"
    status_code: 200
  loop: >
    {{
      (expert_models | dict2items) +
      [
        { 'key': 'tts_voices', 'value': tts_voices },
        { 'key': 'piper_voice_files', 'value': piper_voice_files },
        { 'key': 'embedding_models', 'value': embedding_models },
        { 'key': 'stt_models', 'value': stt_models },
        { 'key': 'vision_models', 'value': vision_models }
      ]
    }}
  loop_control:
    label: "{{ item.key }}"

- name: Populate Consul KV with Home Assistant Token if found
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/kv/config/hass/token"
    method: PUT
    body: "{{ hass_token }}"
    status_code: 200
  when: hass_token is defined and hass_token is not none # Only run if token was successfully extracted

- name: Report if HA token was populated
  ansible.builtin.debug:
    msg: "Home Assistant token was found and populated into Consul KV."
  when: hass_token is defined and hass_token is not none

- name: Report if HA token was NOT populated
  ansible.builtin.debug:
    msg: "Home Assistant auth file not found or token could not be extracted yet. Token NOT populated into Consul KV."
  when: hass_token is not defined or hass_token is none

- name: Populate Consul KV with App Settings
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/kv/config/app/settings"
    method: PUT
    body: >
      {{
        {
          "llama_api_service_name": llama_api_service_name,
          "use_summarizer": use_summarizer,
          "stt_service": stt_service,
          "pipecat_app_dir": pipecat_app_dir,
          "pipecat_log_file": pipecat_log_file,
          "active_stt_provider": active_stt_provider,
          "active_stt_model_name": active_stt_model_name,
          "pipecat_api_keys": pipecat_api_keys,
          "external_experts_config": external_experts_config,
          "openai_api_key": openai_api_key,
          "advertise_ip": advertise_ip,
          "nomad_models_dir": nomad_models_dir,
          "expected_cluster_size": expected_cluster_size,
          "ha_url": "{{ ha_url | default('') }}",
          # Include token only if it was found
          "ha_token": "{{ hass_token | default('') if (hass_token is defined and hass_token is not none) else '' }}"
        } | to_json
      }}
    status_code: 200

# --- End Conditional Tasks ---
