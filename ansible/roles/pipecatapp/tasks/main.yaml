- name: Create pipecatapp application directory
  ansible.builtin.file:
    path: /opt/pipecatapp
    state: directory
    mode: '0755'
  become: yes

- name: Ensure correct ownership of the application directory
  ansible.builtin.file:
    path: /opt/pipecatapp
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    recurse: yes
  become: yes

- name: Create pipecat configuration file
  ansible.builtin.template:
    src: pipecat_config.json.j2
    dest: /opt/pipecatapp/pipecat_config.json
    mode: '0644'
  become: yes

- name: Copy pipecat app
  ansible.builtin.copy:
    src: app.py
    dest: /opt/pipecatapp/app.py
  become: yes
  tags:
    - deploy_app

- name: Create pipecat environment file from template
  ansible.builtin.template:
    src: pipecat.env.j2
    dest: "{{ pipecat_app_dir }}/pipecat.env"
    mode: '0644'
  become: yes

- name: Copy pipecat startup script
  ansible.builtin.template:
    src: start_pipecatapp.sh.j2
    dest: /opt/pipecatapp/start_pipecat.sh
    mode: '0755'
  become: yes
  tags:
    - deploy_app

- name: Copy memory module
  ansible.builtin.copy:
    src: memory.py
    dest: /opt/pipecatapp/memory.py
  become: yes
  tags:
    - deploy_app

- name: Copy web_server module
  ansible.builtin.copy:
    src: web_server.py
    dest: /opt/pipecatapp/web_server.py
  become: yes
  tags:
    - deploy_app

- name: Copy static assets
  ansible.builtin.copy:
    src: static
    dest: /opt/pipecatapp/
  become: yes
  tags:
    - deploy_app

- name: Copy tools directory
  ansible.builtin.copy:
    src: tools
    dest: /opt/pipecatapp/
  become: yes
  tags:
    - deploy_app

- name: Copy moondream_detector module
  ansible.builtin.copy:
    src: moondream_detector.py
    dest: /opt/pipecatapp/moondream_detector.py
  become: yes
  tags:
    - deploy_app

- name: Copy prompts directory
  ansible.builtin.copy:
    src: prompts
    dest: /opt/pipecatapp/
  become: yes
  tags:
    - deploy_app

- name: Create STT model directory
  ansible.builtin.file:
    path: /opt/nomad/models/stt
    state: directory
    mode: '0755'
  become: yes

- name: Clone all STT models from all providers
  ansible.builtin.git:
    repo: "https://huggingface.co/{{ item.1.repo_id }}"
    dest: "/opt/nomad/models/stt/{{ item.0.key }}/{{ item.1.name }}"
    version: main
  loop: "{{ stt_models | dict2items | subelements('value') }}"
  loop_control:
    label: "{{ item.0.key }}/{{ item.1.name }}"
  become: yes

- name: Create VAD model directory
  ansible.builtin.file:
    path: "/home/{{ target_user }}/.cache/torch/hub/snakers4_silero-vad_master"
    state: directory
    owner: "{{ target_user }}"
    group: "{{ target_user }}"
    mode: '0755'
  become: yes

- name: Clone silero-vad model
  ansible.builtin.git:
    repo: 'https://github.com/snakers4/silero-vad.git'
    dest: "/home/{{ target_user }}/.cache/torch/hub/snakers4_silero-vad_master"
    version: master
  become: yes
  become_user: "{{ target_user }}"

- name: Ensure Nomad jobs directory exists
  ansible.builtin.file:
    path: /opt/nomad/jobs
    state: directory
    mode: '0755'
  become: yes

- name: Copy pipecatapp Nomad job file
  ansible.builtin.template:
    src: pipecatapp.nomad.j2
    dest: /opt/nomad/jobs/pipecatapp.nomad
  become: yes

- name: Template prompt evolution Nomad job file
  ansible.builtin.template:
    src: ../../jobs/evolve-prompt.nomad.j2
    dest: /opt/nomad/jobs/evolve-prompt.nomad
  become: yes

- name: Install Playwright browsers using the virtual environment's python
  ansible.builtin.command:
    cmd: "/opt/pipecatapp/venv/bin/python -m playwright install"
  become: yes
  become_user: "{{ target_user }}"
  async: 900 # Set timeout to 15 minutes
  poll: 10   # Check status every 10 seconds

- name: Flush handlers to apply systemd changes
  meta: flush_handlers

- name: Wait for Nomad API to be ready
  ansible.builtin.uri:
    url: "http://{{ ansible_default_ipv4.address }}:4646/v1/status/leader"
    method: GET
    status_code: 200
  register: nomad_api_status
  until: nomad_api_status.status == 200
  retries: 12 # Total wait time = retries * delay = 60 seconds
  delay: 5   # Wait 5 seconds between retries

- name: Stop and purge any existing pipecat-app job to ensure idempotency
  ansible.builtin.command:
    cmd: nomad job stop -purge pipecat-app
  register: pipecat_job_stop_status
  changed_when: "pipecat_job_stop_status.rc == 0"
  failed_when: false
  environment:
    NOMAD_ADDR: "http://{{ ansible_default_ipv4.address }}:4646"

- name: Wait for the main expert service to be healthy in Consul
  ansible.builtin.uri:
    url: "http://127.0.0.1:8500/v1/health/service/prima-api-main"
    return_content: yes
  register: expert_health
  until: >
    expert_health.json is defined and
    expert_health.json | map(attribute='Checks') | flatten | selectattr('Status', 'equalto', 'passing') | list | length > 0
  retries: 60
  delay: 10
  changed_when: false

- name: Run pipecat-app job
  ansible.builtin.command:
    cmd: nomad job run /opt/nomad/jobs/pipecatapp.nomad
  environment:
    NOMAD_ADDR: "http://{{ ansible_default_ipv4.address }}:4646"

- name: Flush handlers to ensure service is enabled and started
  ansible.builtin.meta: flush_handlers
