import docker
import os
import tempfile

class CodeRunnerTool:
    """A tool for executing Python code in a sandboxed Docker container.

    This class provides a method to run arbitrary Python code within a
    secure, isolated, and ephemeral Docker container. It's designed to
    safely execute code generated by the LLM.

    Attributes:
        description (str): A brief description of the tool's purpose.
        name (str): The name of the tool.
        client: The Docker client instance.
        image (str): The name of the Docker image to use for the container.
    """
    def __init__(self):
        """Initializes the CodeRunnerTool."""
        self.description = "Execute Python code in a sandboxed Docker container."
        self.name = "code_runner"
        self.client = docker.from_env()
        self.image = "python:3.9-slim"

    def run_python_code(self, code: str) -> str:
        """Runs a string of Python code in a Docker container and returns the output.

        The code is written to a temporary file, which is mounted read-only
        into a `python:3.9-slim` container. The container executes the script
        and its combined stdout and stderr are captured and returned.

        Args:
            code (str): The Python code to execute.

        Returns:
            str: The captured output (stdout and stderr) from the code
                 execution, or an error message if something went wrong.
        """
        try:
            with tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False) as tmp_file:
                tmp_file.write(code)
                tmp_file_path = tmp_file.name

            container_path = f"/tmp/{os.path.basename(tmp_file_path)}"

            container = self.client.containers.run(
                self.image,
                command=["python", container_path],
                volumes={os.path.dirname(tmp_file_path): {'bind': '/tmp', 'mode': 'ro'}},
                remove=True,
                stderr=True,
                stdout=True
            )

            output = container.decode('utf-8')
            return output

        except docker.errors.ImageNotFound:
            return f"Error: The Docker image '{self.image}' was not found. Please pull it first."
        except Exception as e:
            return f"An error occurred: {e}"
        finally:
            if 'tmp_file_path' in locals() and os.path.exists(tmp_file_path):
                os.unlink(tmp_file_path)
