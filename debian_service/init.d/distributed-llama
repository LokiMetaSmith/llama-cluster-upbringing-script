#!/bin/bash
### BEGIN INIT INFO
# Provides:          distributed-llama
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

# Script variables
DAEMON_NAME="dllama-api"
SERVICE_NAME="distributed-llama"
DEFAULT_CONFIG_FILE="/etc/default/distributed-llama"
PID_DIR_BASE="/var/run/distributed-llama"
LOG_DIR_BASE="/var/log/distributed-llama"

# Source function library.
. /lib/lsb/init-functions

# Load defaults
if [ -r "$DEFAULT_CONFIG_FILE" ]; then
    . "$DEFAULT_CONFIG_FILE"
else
    log_failure_msg "Configuration file $DEFAULT_CONFIG_FILE not found."
    exit 1
fi

# Check for essential variables from config file
if [ -z "$INSTALL_DIR" ] || [ -z "$SERVICE_USER" ] || [ -z "$MODEL_PATH" ] || [ -z "$TOKENIZER_PATH" ]; then
    log_failure_msg "Essential variables (INSTALL_DIR, SERVICE_USER, MODEL_PATH, TOKENIZER_PATH) not set in $DEFAULT_CONFIG_FILE."
    exit 1
fi

# Construct full executable path
REPO_DIR_RELATIVE_PATH="distributed-llama-repo" # Or make this configurable
FULL_EXECUTABLE_PATH="${INSTALL_DIR}/${REPO_DIR_RELATIVE_PATH}/dllama-api"

# Define PID_FILE and LOG_FILE
PID_FILE="${PID_DIR_BASE}/${DAEMON_NAME}.pid"
LOG_FILE="${LOG_DIR_BASE}/${DAEMON_NAME}.log"

# Default API host and port if not set in config
API_HOST=${API_HOST:-"0.0.0.0"}
API_PORT=${API_PORT:-8080}
DAEMON_OPTS=${DAEMON_OPTS:-""}


do_start() {
    # Check if executable exists
    if [ ! -x "$FULL_EXECUTABLE_PATH" ]; then
        log_failure_msg "Executable $FULL_EXECUTABLE_PATH not found or not executable."
        return 1
    fi

    # Check if model and tokenizer paths are valid files
    if [ ! -f "$MODEL_PATH" ]; then
        log_failure_msg "Model file $MODEL_PATH not found."
        return 1
    fi
    if [ ! -f "$TOKENIZER_PATH" ]; then
        log_failure_msg "Tokenizer file $TOKENIZER_PATH not found."
        return 1
    fi

    # Create PID directory
    if [ ! -d "$PID_DIR_BASE" ]; then
        mkdir -p "$PID_DIR_BASE" || { log_failure_msg "Failed to create PID directory $PID_DIR_BASE"; return 1; }
        chown "$SERVICE_USER":"$SERVICE_USER" "$PID_DIR_BASE" || { log_failure_msg "Failed to chown PID directory $PID_DIR_BASE"; return 1; }
        chmod 755 "$PID_DIR_BASE"
    fi

    # Create LOG directory
    if [ ! -d "$LOG_DIR_BASE" ]; then
        mkdir -p "$LOG_DIR_BASE" || { log_failure_msg "Failed to create log directory $LOG_DIR_BASE"; return 1; }
        chown "$SERVICE_USER":"$SERVICE_USER" "$LOG_DIR_BASE" || { log_failure_msg "Failed to chown log directory $LOG_DIR_BASE"; return 1; }
        chmod 755 "$LOG_DIR_BASE"
    fi
    
    # Create LOG file and set permissions
    touch "$LOG_FILE" || { log_failure_msg "Failed to create log file $LOG_FILE"; return 1; }
    chown "$SERVICE_USER":"$SERVICE_USER" "$LOG_FILE" || { log_failure_msg "Failed to chown log file $LOG_FILE"; return 1; }
    chmod 644 "$LOG_FILE"


    log_daemon_msg "Starting $SERVICE_NAME: $DAEMON_NAME"
    start-stop-daemon --start --quiet --pidfile "$PID_FILE" --make-pidfile --chuid "$SERVICE_USER" --background \
        --startas /bin/bash -- -c "$FULL_EXECUTABLE_PATH --model \"$MODEL_PATH\" --tokenizer \"$TOKENIZER_PATH\" --host \"$API_HOST\" --port \"$API_PORT\" $DAEMON_OPTS >> \"$LOG_FILE\" 2>&1"
    RETVAL=$?
    log_end_msg $RETVAL
    return $RETVAL
}

do_stop() {
    log_daemon_msg "Stopping $SERVICE_NAME: $DAEMON_NAME"
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "$PID_FILE" --name "$DAEMON_NAME"
    RETVAL=$?
    rm -f "$PID_FILE"
    log_end_msg $RETVAL
    return $RETVAL
}

do_status() {
    status_of_proc -p "$PID_FILE" "$DAEMON_NAME" "$SERVICE_NAME"
    return $?
}

case "$1" in
    start)
        do_start
        exit $?
        ;;
    stop)
        do_stop
        exit $?
        ;;
    restart)
        log_daemon_msg "Restarting $SERVICE_NAME: $DAEMON_NAME"
        do_stop
        # Add a small delay to ensure the process has time to stop
        sleep 1 
        do_start
        exit $?
        ;;
    status)
        do_status
        exit $?
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 2
        ;;
esac

exit 0
