- name: Play 0 - Bootstrap SSH on Controller
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    # This ensures we are targeting the correct user's home directory, even if
    # the playbook is run with a different local user. It defaults to 'user'
    # which is the standard for this project.
    target_user: "user"
  tasks:
    - name: Wait for a Consul leader to be elected
      ansible.builtin.uri:
        url: "http://127.0.0.1:8500/v1/status/leader"
        return_content: yes
      register: consul_leader_status
      until: consul_leader_status.content != '""' and consul_leader_status.status == 200
      retries: 12 # Wait for up to 60 seconds
      delay: 5
      ignore_errors: yes # We handle the failure manually in the next task

    - name: Fail gracefully if no Consul leader is found
      ansible.builtin.fail:
        msg: |
          Consul cluster has no leader after waiting for 60 seconds.
          The playbook cannot continue without a functioning Consul cluster.
          Please check the status of your Consul server nodes to ensure they are running and can communicate.
          Common reasons for this are:
          1. Not enough server nodes are running to form a quorum.
          2. A network partition is preventing communication between servers.
      when: consul_leader_status.failed or consul_leader_status.content == '""'

    - name: Ensure .ssh directory exists for target user
      ansible.builtin.file:
        path: "/home/{{ target_user }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"

    - name: Fetch public keys from Consul KV store
      ansible.builtin.uri:
        url: "http://127.0.0.1:8500/v1/kv/ssh-keys?recurse"
        return_content: yes
      register: consul_kv_response
      # We don't need retries here anymore because the leader check passed
      # but we should still check the status
      failed_when: consul_kv_response.status != 200

    - name: Decode and assemble public keys
      ansible.builtin.set_fact:
        authorized_keys_content: "{{ consul_kv_response.json | community.general.json_query('[].Value') | map('b64decode') | join('\n') }}\n"
      when: consul_kv_response.status == 200 and consul_kv_response.json is defined

    - name: Populate authorized_keys with keys from Consul
      ansible.builtin.copy:
        content: "{{ authorized_keys_content | default('') }}"
        dest: "/home/{{ target_user }}/.ssh/authorized_keys"
        mode: '0600'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
      when: authorized_keys_content is defined

- name: Play 1 - Bootstrap New Nodes as 'root'
  hosts: all:!localhost
  become: yes # We are already root

  tasks:
    - name: Ensure the sudo package is installed
      ansible.builtin.apt:
        name: sudo
        state: present

    - name: Ensure the rsync package is installed
      ansible.builtin.apt:
        name: rsync
        state: present
        
    - name: Ensure the sudo group exists
      ansible.builtin.group:
        name: sudo
        state: present

    - name: Create the 'user' account with sudo access
      ansible.builtin.user:
        name: user
        shell: /bin/bash
        groups: sudo
        append: yes

    - name: Allow 'user' to have passwordless sudo access
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/ansible-user-nopasswd
        line: "user ALL=(ALL) NOPASSWD: ALL"
        create: yes
        validate: 'visudo -cf %s'
        mode: '0440'


- name: Play 2 - Configure Nodes as 'user'
  hosts: all
  remote_user: user
  become: yes # Now we use the sudo privileges we just created

  pre_tasks:
    - name: Check connectivity to all nodes
      ansible.builtin.ping:

    - name: Distribute control repository to all nodes
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/"
        dest: /opt/cluster-infra/
        rsync_opts:
          - "--exclude=.git"

  roles:
    - common
    - common-tools
    - consul
    - docker
    - nomad
    - python_deps
    - llama_cpp
    - whisper_cpp
    - provisioning_api
    - desktop_extras
    - paddler
    - pipecatapp
    - vision
   # - kittentts
    - bootstrap_agent
    
  post_tasks:
    - name: Discover and save the MAC address for future use
      ansible.builtin.blockinfile:
        path: "host_vars/{{ inventory_hostname }}.yaml"
        create: yes
        block: |
          mac_address: "{{ ansible_default_ipv4.macaddress }}"
      delegate_to: localhost

    - name: Force a final synchronization of SSH keys
      ansible.builtin.command: /usr/local/bin/update-ssh-authorized-keys.sh
      register: sync_result
      changed_when: "'updated' in sync_result.stdout"
