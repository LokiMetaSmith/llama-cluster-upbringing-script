- name: Play 1 - Dynamically Select New Control Plane Nodes
  hosts: all
  gather_facts: yes
  ignore_unreachable: yes
  tasks:
    - name: Check if host is a suitable controller candidate
      ansible.builtin.set_fact:
        is_controller_candidate: true
      when:
        - ansible_processor_vcpus is defined
        - ansible_processor_vcpus >= 2
        - ansible_memtotal_mb is defined
        - ansible_memtotal_mb >= 8000

    - name: Add suitable candidates to the 'new_controllers' group
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: new_controllers
      delegate_to: localhost
      run_once: true
      # --- CORRECTED LINE ---
      # Use list slicing to select the first 3 items
      loop: "{{ (hostvars.values() | selectattr('is_controller_candidate', 'defined') | map(attribute='inventory_hostname') | list)[:3] }}"

- name: Play 2 - Recover Nomad and Consul Cluster State
  hosts: new_controllers
  become: yes
  gather_facts: no
  ignore_unreachable: no

  tasks:
    - name: Add the selected hosts to the 'controller_nodes' group as well
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: controller_nodes
      loop: "{{ groups['new_controllers'] }}"

    - name: Ensure smartmontools is installed
      ansible.builtin.apt:
        name: smartmontools
        state: present

    - name: Find block devices
      ansible.builtin.set_fact:
        block_devices: "{{ ansible_devices.keys() | select('match', '^(s|xv)d[a-z]+$') | list }}"
      when: ansible_devices is defined

    - name: Check SMART health for each block device
      ansible.builtin.command:
        cmd: "smartctl -H /dev/{{ item }}"
      loop: "{{ block_devices | default([]) }}"
      register: smart_health
      changed_when: false
      failed_when: "'FAILED!' in smart_health.stdout or 'PASSED' not in smart_health.stdout"

    - name: Check available disk space on root filesystem
      ansible.builtin.command:
        cmd: "df --output=pcent / | tail -n 1 | tr -d ' %'"
      register: disk_space
      changed_when: false
      failed_when: "disk_space.stdout | int > 90"

    - name: Stop Nomad service
      ansible.builtin.service:
        name: nomad
        state: stopped
      register: stop_nomad_service
      failed_when:
        - stop_nomad_service.failed == true
        - not stop_nomad_service.msg.startswith('Could not find the requested service')

    - name: Stop Consul service
      ansible.builtin.service:
        name: consul
        state: stopped
      register: stop_consul_service
      failed_when:
        - stop_consul_service.failed == true
        - not stop_consul_service.msg.startswith('Could not find the requested service')

    - name: Remove Nomad data directory to reset state
      ansible.builtin.file:
        path: /opt/nomad/data
        state: absent

    - name: Remove Consul data directory to reset state
      ansible.builtin.file:
        path: /opt/consul/data
        state: absent

    - name: Re-apply Consul role to configure as a server
      ansible.builtin.include_role:
        name: consul

    - name: Re-apply Nomad role to configure as a server
      ansible.builtin.include_role:
        name: nomad

    - name: Start Consul service
      ansible.builtin.service:
        name: consul
        state: started
        enabled: yes
      register: start_consul_service
      failed_when:
        - start_consul_service.failed == true
        - not start_consul_service.msg.startswith('Could not find the requested service')

    - name: Start Nomad service
      ansible.builtin.service:
        name: nomad
        state: started
        enabled: yes
      register: start_nomad_service
      failed_when:
        - start_nomad_service.failed == true
        - not start_nomad_service.msg.startswith('Could not find the requested service')
