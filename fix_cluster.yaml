---
- name: Recover Nomad and Consul Cluster State
  hosts: controller_nodes
  become: yes
  gather_facts: yes
  ignore_unreachable: yes

  tasks:
    - name: Ensure smartmontools is installed
      ansible.builtin.apt:
        name: smartmontools
        state: present

    - name: Find block devices
      ansible.builtin.set_fact:
        block_devices: "{{ ansible_devices.keys() | select('match', '^(s|xv)d[a-z]+$') | list }}"
      when: ansible_devices is defined

    - name: Check SMART health for each block device
      ansible.builtin.command:
        cmd: "smartctl -H /dev/{{ item }}"
      loop: "{{ block_devices | default([]) }}"
      register: smart_health
      changed_when: false
      failed_when: "'FAILED!' in smart_health.stdout or 'PASSED' not in smart_health.stdout"

    - name: Check available disk space on root filesystem
      ansible.builtin.command:
        cmd: "df --output=pcent / | tail -n 1 | tr -d ' %'"
      register: disk_space
      changed_when: false
      failed_when: "disk_space.stdout | int > 90"

    - name: Stop Nomad service
      ansible.builtin.service:
        name: nomad
        state: stopped
      register: stop_nomad_service
      failed_when:
        - stop_nomad_service.failed == true
        - '"Could not find the requested service" not in stop_nomad_service.msg'

    - name: Stop Consul service
      ansible.builtin.service:
        name: consul
        state: stopped
      register: stop_consul_service
      failed_when:
        - stop_consul_service.failed == true
        - '"Could not find the requested service" not in stop_consul_service.msg'

    - name: Remove Nomad data directory to reset state
      ansible.builtin.file:
        path: /opt/nomad/data
        state: absent

    - name: Remove Consul data directory to reset state
      ansible.builtin.file:
        path: /opt/consul/data
        state: absent

    - name: Start Consul service
      ansible.builtin.service:
        name: consul
        state: started
      register: start_consul_service
      failed_when:
        - start_consul_service.failed == true
        - '"Could not find the requested service" not in start_consul_service.msg'

    - name: Start Nomad service
      ansible.builtin.service:
        name: nomad
        state: started
      register: start_nomad_service
      failed_when:
        - start_nomad_service.failed == true
        - '"Could not find the requested service" not in start_nomad_service.msg'
